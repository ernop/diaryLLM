// <auto-generated />
using System;
using DiaryUI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiaryUI.Migrations
{
    [DbContext(typeof(DiaryDbContext))]
    [Migration("20230215051214_one")]
    partial class one
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("DiaryUI.Chunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChunkForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChunkForeignKey");

                    b.ToTable("Chunks");
                });

            modelBuilder.Entity("DiaryUI.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DiaryUI.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QueryForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QueryForeignKey");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("DiaryUI.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DiaryUI.TagInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tag.Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Transcript.Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Tag.Id");

                    b.HasIndex("Transcript.Id");

                    b.ToTable("TagInstances");
                });

            modelBuilder.Entity("DiaryUI.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecorderForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TranscriptPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecorderForeignKey");

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("DiaryUI.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiaryUI.Chunk", b =>
                {
                    b.HasOne("DiaryUI.Transcript", "Transcript")
                        .WithMany("Chunks")
                        .HasForeignKey("ChunkForeignKey");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("DiaryUI.Query", b =>
                {
                    b.HasOne("DiaryUI.Chunk", "Chunk")
                        .WithMany("Queries")
                        .HasForeignKey("QueryForeignKey");

                    b.Navigation("Chunk");
                });

            modelBuilder.Entity("DiaryUI.TagInstance", b =>
                {
                    b.HasOne("DiaryUI.Tag", "Tag")
                        .WithMany("TagInstances")
                        .HasForeignKey("Tag.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiaryUI.Transcript", "Transcript")
                        .WithMany("TagInstances")
                        .HasForeignKey("Transcript.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("DiaryUI.Transcript", b =>
                {
                    b.HasOne("DiaryUI.Person", "Recorder")
                        .WithMany("Transcripts")
                        .HasForeignKey("RecorderForeignKey");

                    b.Navigation("Recorder");
                });

            modelBuilder.Entity("DiaryUI.Chunk", b =>
                {
                    b.Navigation("Queries");
                });

            modelBuilder.Entity("DiaryUI.Person", b =>
                {
                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("DiaryUI.Tag", b =>
                {
                    b.Navigation("TagInstances");
                });

            modelBuilder.Entity("DiaryUI.Transcript", b =>
                {
                    b.Navigation("Chunks");

                    b.Navigation("TagInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
